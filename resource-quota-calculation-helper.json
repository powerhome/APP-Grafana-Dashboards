{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "prometheus",
        "uid": "000000006"
      },
      "gridPos": {
        "h": 4,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 10,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "# WIP\n\n## Be careful with Jobs\nAs of now it is listing all but **YOU SHOULD** only consider the max that should run at once.",
        "mode": "markdown"
      },
      "pluginVersion": "9.3.6",
      "transparent": true,
      "type": "text"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 4
      },
      "id": 6,
      "panels": [],
      "title": "Replicas, CPU, Memory and Storage (missing Ephemeral Storage)",
      "type": "row"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto",
            "filterable": false,
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "light-blue",
                "value": null
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Total Request Storage"
            },
            "properties": [
              {
                "id": "unit",
                "value": "bytes"
              },
              {
                "id": "noValue",
                "value": "0 GiB"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": ".*[Mm]emory$"
            },
            "properties": [
              {
                "id": "unit",
                "value": "bytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Replicas"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 107
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Max Surge"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 87
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "^Max [^S]*"
            },
            "properties": [
              {
                "id": "custom.displayMode",
                "value": "color-background-solid"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 24,
        "x": 0,
        "y": 5
      },
      "id": 2,
      "options": {
        "footer": {
          "enablePagination": false,
          "fields": [
            "Value #replicas"
          ],
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "frameIndex": 0,
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "9.3.6",
      "repeat": "type",
      "repeatDirection": "v",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${datasource}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "count(namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\", namespace=\"$namespace\", workload_type=\"$type\"}) by (workload, workload_type)",
          "format": "table",
          "instant": true,
          "legendFormat": "",
          "range": false,
          "refId": "replicas"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${datasource}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "max(label_replace(label_replace(\n      kube_deployment_spec_strategy_rollingupdate_max_surge{job=\"kube-state-metrics\", cluster=\"$cluster\", namespace=\"$namespace\"}, \"workload\", \"$1\", \"deployment\", \"(.*)\"\n    ), \"workload_type\", \"deployment\", \"\", \"\")) by (workload, workload_type) or max(namespace_workload_pod:kube_pod_owner:relabel -1) by (workload, workload_type)",
          "format": "table",
          "hide": false,
          "instant": true,
          "interval": "",
          "legendFormat": "",
          "range": false,
          "refId": "Max surge"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${datasource}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "sum(\n  kube_pod_container_resource_requests{job=\"kube-state-metrics\",cluster=\"$cluster\", namespace=\"$namespace\", resource=\"cpu\"}\n* on(namespace,pod)\n  group_left(workload, workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\", namespace=\"$namespace\", workload_type=\"$type\"}\n) by (workload, workload_type)\n/\ncount(namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\", namespace=\"$namespace\", workload_type=\"$type\"}) by (workload, workload_type)",
          "format": "table",
          "hide": false,
          "instant": true,
          "legendFormat": "",
          "range": false,
          "refId": "request_cpu"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${datasource}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "sum(\n  kube_pod_container_resource_limits{job=\"kube-state-metrics\",cluster=\"$cluster\", namespace=\"$namespace\", resource=\"cpu\"}\n* on(namespace,pod)\n  group_left(workload, workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\", namespace=\"$namespace\", workload_type=\"$type\"}\n) by (workload, workload_type)\n/\ncount(namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\", namespace=\"$namespace\", workload_type=\"$type\"}) by (workload, workload_type)",
          "format": "table",
          "hide": false,
          "instant": true,
          "legendFormat": "",
          "range": false,
          "refId": "limit_cpu"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${datasource}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "sum(\n  kube_pod_container_resource_requests{job=\"kube-state-metrics\", cluster=\"$cluster\", namespace=\"$namespace\", resource=\"memory\"}\n* on(namespace,pod)\n  group_left(workload, workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\", namespace=\"$namespace\", workload_type=\"$type\"}\n) by (workload, workload_type)\n/\ncount(namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\", namespace=\"$namespace\", workload_type=\"$type\"}) by (workload, workload_type)",
          "format": "table",
          "hide": false,
          "instant": true,
          "legendFormat": "",
          "range": false,
          "refId": "request_memory"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${datasource}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "sum(\n  kube_pod_container_resource_limits{job=\"kube-state-metrics\", cluster=\"$cluster\", namespace=\"$namespace\", resource=\"memory\"}\n* on(namespace,pod)\n  group_left(workload, workload_type) namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\", namespace=\"$namespace\", workload_type=\"$type\"}\n) by (workload, workload_type)\n/\ncount(namespace_workload_pod:kube_pod_owner:relabel{cluster=\"$cluster\", namespace=\"$namespace\", workload_type=\"$type\"}) by (workload, workload_type)",
          "format": "table",
          "hide": false,
          "instant": true,
          "legendFormat": "",
          "range": false,
          "refId": "limit_memory"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${datasource}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "sum(kube_persistentvolumeclaim_resource_requests_storage_bytes{namespace=\"streamfinancial-cloud-production\"}\n* on(namespace,persistentvolumeclaim)\n  group_left(workload, workload_type) (\nmax(kube_pod_spec_volumes_persistentvolumeclaims_info{namespace=\"streamfinancial-cloud-production\"}\n* on(namespace,pod)\n  group_left(workload, workload_type) namespace_workload_pod:kube_pod_owner:relabel{namespace=\"streamfinancial-cloud-production\"}) by (namespace,persistentvolumeclaim, workload, workload_type)\n)) by (workload, workload_type)",
          "format": "table",
          "hide": false,
          "instant": true,
          "legendFormat": "",
          "range": false,
          "refId": "Request Storage"
        }
      ],
      "title": "$type",
      "transformations": [
        {
          "id": "merge",
          "options": {}
        },
        {
          "id": "filterByValue",
          "options": {
            "filters": [
              {
                "config": {
                  "id": "isNull",
                  "options": {}
                },
                "fieldName": "Value #replicas"
              }
            ],
            "match": "any",
            "type": "exclude"
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Max instances",
            "binary": {
              "left": "Value #replicas",
              "reducer": "sum",
              "right": "Value #Max surge"
            },
            "mode": "binary",
            "reduce": {
              "include": [],
              "reducer": "sum"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Max Request CPU",
            "binary": {
              "left": "Max instances",
              "operator": "*",
              "reducer": "sum",
              "right": "Value #request_cpu"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Max Limit CPU",
            "binary": {
              "left": "Max instances",
              "operator": "*",
              "reducer": "sum",
              "right": "Value #limit_cpu"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Max Request Memory",
            "binary": {
              "left": "Max instances",
              "operator": "*",
              "reducer": "sum",
              "right": "Value #request_memory"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Max Limit Memory",
            "binary": {
              "left": "Max instances",
              "operator": "*",
              "reducer": "sum",
              "right": "Value #limit_memory"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            }
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "Time": true,
              "workload_type": true
            },
            "indexByName": {
              "Max Limit CPU": 9,
              "Max Limit Memory": 13,
              "Max Request CPU": 7,
              "Max Request Memory": 11,
              "Max instances": 5,
              "Time": 0,
              "Value #Max surge": 4,
              "Value #Request Storage": 14,
              "Value #limit_cpu": 8,
              "Value #limit_memory": 12,
              "Value #replicas": 3,
              "Value #request_cpu": 6,
              "Value #request_memory": 10,
              "workload": 1,
              "workload_type": 2
            },
            "renameByName": {
              "Max instances": "",
              "Time": "",
              "Value #A": "Limit CPU",
              "Value #Max surge": "Max Surge",
              "Value #Request Storage": "Total Request Storage",
              "Value #cpu_request": "Request CPU",
              "Value #limit_cpu": "Limit CPU",
              "Value #limit_memory": "Limit Memory",
              "Value #replicas": "Replicas",
              "Value #request_cpu": "Request CPU",
              "Value #request_memory": "Request Memory",
              "workload": "Name",
              "workload_type": "Type"
            }
          }
        }
      ],
      "type": "table"
    }
  ],
  "schemaVersion": 37,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "prometheus-app-prod-hq",
          "value": "prometheus-app-prod-hq"
        },
        "hide": 0,
        "includeAll": false,
        "label": "Data source",
        "multi": false,
        "name": "datasource",
        "options": [],
        "query": "prometheus",
        "queryValue": "",
        "refresh": 1,
        "regex": "/prometheus-.*/",
        "skipUrlSync": false,
        "type": "datasource"
      },
      {
        "current": {
          "selected": false,
          "text": "streamfinancial-cloud-production",
          "value": "streamfinancial-cloud-production"
        },
        "datasource": {
          "type": "prometheus",
          "uid": "${datasource}"
        },
        "definition": "label_values(kube_pod_info{job=\"kube-state-metrics\"}, namespace)",
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "namespace",
        "options": [],
        "query": {
          "query": "label_values(kube_pod_info{job=\"kube-state-metrics\"}, namespace)",
          "refId": "StandardVariableQuery"
        },
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": ".*",
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": {
          "type": "prometheus",
          "uid": "${datasource}"
        },
        "definition": "label_values(namespace_workload_pod:kube_pod_owner:relabel{namespace=\"$namespace\", workload=~\".+\"}, workload_type)",
        "hide": 0,
        "includeAll": true,
        "label": "Type",
        "multi": true,
        "name": "type",
        "options": [],
        "query": {
          "query": "label_values(namespace_workload_pod:kube_pod_owner:relabel{namespace=\"$namespace\", workload=~\".+\"}, workload_type)",
          "refId": "StandardVariableQuery"
        },
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "current": {
          "isNone": true,
          "selected": false,
          "text": "None",
          "value": ""
        },
        "datasource": {
          "type": "prometheus",
          "uid": "${datasource}"
        },
        "definition": "label_values(up{job=\"kube-state-metrics\"}, cluster)",
        "hide": 2,
        "includeAll": false,
        "multi": false,
        "name": "cluster",
        "options": [],
        "query": {
          "query": "label_values(up{job=\"kube-state-metrics\"}, cluster)",
          "refId": "StandardVariableQuery"
        },
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 1,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Resource Quota Calculation",
  "uid": "jgcCMu84k",
  "version": 8,
  "weekStart": ""
}
